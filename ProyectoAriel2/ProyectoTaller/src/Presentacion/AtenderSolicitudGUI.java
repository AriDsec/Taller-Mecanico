package Presentacion;

/**
 * 
 *Elaborado por: Ariel Fernandez Chacon.
 *Carnet: 2019077501
 *Ultima modificacion: 12 de Junio 06:30 pm.
 *GUI
 * 
 */

import Conceptos.Mecanico;
import Conceptos.Servicio;
import Conceptos.Solicitud;
import static Conceptos.Solicitud.solicitudes;
import Util.accesoXML;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author falla
 */
public class AtenderSolicitudGUI extends javax.swing.JFrame {

    public AtenderSolicitudGUI() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        llenarComboBoxSolicitud();
        llenarComboBoxServicio();
        llenarComboBoxMecanico();
        llenarComboBoxEstado();
        definirModeloTablaOtrosServicios();
    }

    private void definirModeloTablaOtrosServicios() {
        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{},
                new String[]{"Servicio", "Seleccionado"}
        ) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return columnIndex == 1 ? Boolean.class : String.class;
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 1; // Solo la columna del checkbox es editable
            }
        };
        tablaOtrosServicios.setModel(model);
    }

    private void actualizarTablaOtrosServicios(Solicitud solicitud) {
        DefaultTableModel model = (DefaultTableModel) tablaOtrosServicios.getModel();
        model.setRowCount(0); // Limpiar la tabla

        for (Servicio servicio : Servicio.servicios) {
            if (servicio != null) {
                boolean seleccionado = false;
                for (Servicio s : solicitud.getServicios()) {
                    if (s != null && s.getIdentificacion().equals(servicio.getIdentificacion())) {
                        seleccionado = true;
                        break;
                    }
                }
                model.addRow(new Object[]{servicio.getNombre(), seleccionado});
            }
        }
    }

    // Método para llenar el comboBoxSolicitud
    private void llenarComboBoxSolicitud() {
        comboBoxSolicitud.removeAllItems();
        comboBoxSolicitud.addItem("");
        for (Solicitud solicitud : Solicitud.solicitudes) {
            if (solicitud != null) {
                comboBoxSolicitud.addItem(String.valueOf(solicitud.getIdentificacion()));
            }
        }
    }

    // Método para llenar el comboBoxServicio
    private void llenarComboBoxServicio() {
        comboBoxServicio.removeAllItems();
        comboBoxServicio.addItem("");
        for (Servicio servicio : Servicio.servicios) {
            if (servicio != null) {
                comboBoxServicio.addItem(servicio.getNombre());
            }
        }
    }

    // Método para llenar el comboBoxMecanico
    private void llenarComboBoxMecanico() {
        comboBoxMecanico.removeAllItems();
        comboBoxMecanico.addItem("");
        for (Mecanico mecanico : Mecanico.mecanicos) {
            if (mecanico != null) {
                comboBoxMecanico.addItem(mecanico.getNombre());
            }
        }
    }

    // Método para llenar el comboBoxEstado
    private void llenarComboBoxEstado() {
        comboBoxEstado.removeAllItems();
        HashMap<String, String> estadosMap = accesoXML.leerEstados();
        for (Map.Entry<String, String> entry : estadosMap.entrySet()) {
            comboBoxEstado.addItem(entry.getValue());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tablaOtrosServicios = new javax.swing.JTable();
        lblID6 = new javax.swing.JLabel();
        comboBoxSolicitud = new javax.swing.JComboBox<>();
        lblID7 = new javax.swing.JLabel();
        txtPlaca = new javax.swing.JTextField();
        lblID8 = new javax.swing.JLabel();
        lblID9 = new javax.swing.JLabel();
        comboBoxServicio = new javax.swing.JComboBox<>();
        lblID10 = new javax.swing.JLabel();
        comboBoxEstado = new javax.swing.JComboBox<>();
        lblID11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservaciones = new javax.swing.JTextPane();
        lblID12 = new javax.swing.JLabel();
        btnSalvar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        comboBoxMecanico = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Atender Solicitud");

        tablaOtrosServicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaOtrosServicios);

        lblID6.setFont(new java.awt.Font("Yu Gothic Light", 1, 16)); // NOI18N
        lblID6.setText("#Servicio");

        comboBoxSolicitud.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSolicitudActionPerformed(evt);
            }
        });

        lblID7.setFont(new java.awt.Font("Yu Gothic Light", 1, 16)); // NOI18N
        lblID7.setText("Placa");

        txtPlaca.setText("jTextField1");

        lblID8.setFont(new java.awt.Font("Yu Gothic Light", 1, 16)); // NOI18N
        lblID8.setText("Tipo de Servicio");

        lblID9.setFont(new java.awt.Font("Yu Gothic Light", 1, 16)); // NOI18N
        lblID9.setText("Mecanico");

        comboBoxServicio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxServicioActionPerformed(evt);
            }
        });

        lblID10.setFont(new java.awt.Font("Yu Gothic Light", 1, 16)); // NOI18N
        lblID10.setText("Estado");

        comboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxEstadoActionPerformed(evt);
            }
        });

        lblID11.setFont(new java.awt.Font("Yu Gothic Light", 1, 16)); // NOI18N
        lblID11.setText("Observaciones");

        jScrollPane1.setViewportView(txtObservaciones);

        lblID12.setFont(new java.awt.Font("Yu Gothic Light", 1, 16)); // NOI18N
        lblID12.setText("Otros servicios (adicionales)");

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        comboBoxMecanico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxMecanico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMecanicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblID8)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(27, 27, 27)
                                    .addComponent(comboBoxSolicitud, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(237, 237, 237)
                                    .addComponent(lblID7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtPlaca))
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(comboBoxServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addComponent(lblID6)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblID9)
                            .addGap(37, 37, 37)
                            .addComponent(comboBoxMecanico, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(55, 55, 55)
                            .addComponent(lblID10)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblID12)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblID11)
                                .addGap(27, 27, 27)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSalvar)
                .addGap(18, 18, 18)
                .addComponent(btnSalir)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID6)
                    .addComponent(comboBoxSolicitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblID7)
                    .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID8)
                    .addComponent(comboBoxServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID9)
                    .addComponent(lblID10)
                    .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxMecanico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(lblID11)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblID12)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnSalvar))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Método para buscar una solicitud por la identificación del servicio
    private Solicitud buscarObjSolicitud(Integer solicitudID) {
        for (Solicitud solicitud : Solicitud.solicitudes) {
            if (solicitud != null && solicitud.getIdentificacion().equals(solicitudID)) {
                return solicitud;
            }
        }
        return null;
    }

    // Método para limpiar los campos de la interfaz
    private void limpiarCampos() {
        txtPlaca.setText("");
        comboBoxServicio.setSelectedIndex(-1);  // Seleccionar ningún elemento
        comboBoxMecanico.setSelectedIndex(-1);  // Seleccionar ningún elemento
        comboBoxEstado.setSelectedIndex(-1);    // Seleccionar ningún elemento
        txtObservaciones.setText("");
    }

    // Método para obtener el nombre del estado a partir del ID
    private String obtenerNombreEstado(String estadoID) {
        HashMap<String, String> estadosMap = accesoXML.leerEstados();
        return estadosMap.get(estadoID);
    }

    private void comboBoxSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSolicitudActionPerformed
        String selectedItem = (String) comboBoxSolicitud.getSelectedItem();

        // Limpiar los campos antes de actualizar con nueva información
        limpiarCampos();

        if (selectedItem != null && !selectedItem.trim().isEmpty()) {
            try {
                Integer solicitudID = Integer.parseInt(selectedItem);
                System.out.println(solicitudID);

                // Buscar la solicitud correspondiente al servicio seleccionado
                Solicitud solicitud = buscarObjSolicitud(solicitudID);

                // Llenar los campos de la interfaz con la información de la solicitud
                if (solicitud != null) {
                    txtPlaca.setText(solicitud.getPlaca() != null ? solicitud.getPlaca() : "");
                    comboBoxServicio.setSelectedItem(solicitud.getServicio() != null ? solicitud.getServicio().getNombre() : null);
                    comboBoxMecanico.setSelectedItem(solicitud.getMecanico() != null ? solicitud.getMecanico().getNombre() : null);

                    // Obtener el nombre del estado a partir del ID
                    String estadoNombre = obtenerNombreEstado(solicitud.getEstado());
                    comboBoxEstado.setSelectedItem(estadoNombre != null ? estadoNombre : null);

                    txtObservaciones.setText(solicitud.getObservaciones() != null ? solicitud.getObservaciones() : "");

                    actualizarTablaOtrosServicios(solicitud);
                } else {
                    System.err.println("No se encontró la solicitud con ID: " + solicitudID);
                }

            } catch (NumberFormatException e) {
                System.err.println("Error al convertir el valor seleccionado a un número entero: " + e.getMessage());
            } catch (NullPointerException e) {
                System.err.println("Error al acceder a un objeto nulo: " + e.getMessage());
            }
        } else {
            System.err.println("El valor seleccionado en el comboBoxSolicitud es nulo o vacío");
        }
    }//GEN-LAST:event_comboBoxSolicitudActionPerformed

    private void comboBoxServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxServicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxServicioActionPerformed

    private void comboBoxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxEstadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxEstadoActionPerformed

    // Método para obtener el servicio seleccionado del ComboBox
    private Servicio obtenerServicioSeleccionado(String nombreServicio) {
        // Recorre la lista de servicios y devuelve el servicio que coincida con el nombre
        for (Servicio servicio : Servicio.servicios) {
            if (servicio != null && servicio.getNombre().equals(nombreServicio)) {
                return servicio;
            }
        }
        return null; // Devuelve null si no se encuentra el servicio
    }

// Método para obtener el mecánico seleccionado del ComboBox
    private Mecanico obtenerMecanicoSeleccionado(String nombreMecanico) {
        // Recorre la lista de mecánicos y devuelve el mecánico que coincida con el nombre
        for (Mecanico mecanico : Mecanico.mecanicos) {
            if (mecanico != null && mecanico.getNombre().equals(nombreMecanico)) {
                return mecanico;
            }
        }
        return null; // Devuelve null si no se encuentra el mecánico
    }

// Método para obtener los otros servicios seleccionados de la tabla
    private Servicio[] obtenerOtrosServiciosSeleccionados() {
        DefaultTableModel model = (DefaultTableModel) tablaOtrosServicios.getModel();
        int rowCount = model.getRowCount();
        ArrayList<Servicio> otrosServicios = new ArrayList<>();

        // Recorre todas las filas de la tabla
        for (int i = 0; i < rowCount; i++) {
            String nombreServicio = model.getValueAt(i, 0).toString(); // Se asume que el nombre del servicio está en la primera columna
            Servicio servicio = obtenerServicioSeleccionado(nombreServicio);
            if (servicio != null) {
                otrosServicios.add(servicio);
            }
        }

        // Convierte la lista de servicios a un arreglo y devuélvelo
        return otrosServicios.toArray(Servicio[]::new);
    }



    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // Obtener la nueva información de los campos y ComboBoxes
        Integer id = Integer.valueOf((String) comboBoxSolicitud.getSelectedItem()) ;
        String placa = txtPlaca.getText().trim(); // Trim para eliminar espacios en blanco al inicio y al final
        Servicio servicio = obtenerServicioSeleccionado((String) comboBoxServicio.getSelectedItem());
        Mecanico mecanico = obtenerMecanicoSeleccionado((String) comboBoxMecanico.getSelectedItem());
        String estado = (String) comboBoxEstado.getSelectedItem();
        String observaciones = txtObservaciones.getText().trim(); // Trim para eliminar espacios en blanco al inicio y al final
        Servicio[] otrosServicios = obtenerOtrosServiciosSeleccionados();

        // Verificar si alguno de los campos está vacío o es null
        if (placa.isEmpty() || servicio == null || mecanico == null || estado.isEmpty() || observaciones.isEmpty()) {
            // Mostrar un mensaje de error si algún campo está vacío o es null
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos antes de guardar los cambios.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método sin continuar
        }

        // Llamar a la función atender() y pasarle la nueva información
        if (id != null) {
            Solicitud.atender(id, placa, servicio, mecanico, estado, observaciones, otrosServicios);
            // Aquí puedes agregar cualquier lógica adicional después de atender la solicitud, si es necesario
        } else {
            // Mostrar un mensaje de error si no se selecciona ninguna solicitud
            JOptionPane.showMessageDialog(this, "Seleccione una solicitud antes de guardar los cambios.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void comboBoxMecanicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMecanicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxMecanicoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AtenderSolicitudGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AtenderSolicitudGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AtenderSolicitudGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AtenderSolicitudGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AtenderSolicitudGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<String> comboBoxEstado;
    private javax.swing.JComboBox<String> comboBoxMecanico;
    private javax.swing.JComboBox<String> comboBoxServicio;
    private javax.swing.JComboBox<String> comboBoxSolicitud;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblID10;
    private javax.swing.JLabel lblID11;
    private javax.swing.JLabel lblID12;
    private javax.swing.JLabel lblID6;
    private javax.swing.JLabel lblID7;
    private javax.swing.JLabel lblID8;
    private javax.swing.JLabel lblID9;
    private javax.swing.JTable tablaOtrosServicios;
    private javax.swing.JTextPane txtObservaciones;
    private javax.swing.JTextField txtPlaca;
    // End of variables declaration//GEN-END:variables
}
